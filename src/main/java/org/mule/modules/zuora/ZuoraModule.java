/**
 * Mule Zuora Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.zuora;

import com.zuora.api.AmendResult;
import com.zuora.api.DeleteResult;
import com.zuora.api.SaveResult;
import com.zuora.api.SubscribeResult;
import com.zuora.api.object.ZObject;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Optional;
import org.mule.api.annotations.param.Session;
import org.mule.api.annotations.param.SessionKey;
import org.mule.api.annotations.session.SessionCreate;
import org.mule.api.annotations.session.SessionDestroy;
import org.mule.modules.zuora.zobject.ZObjectType;
import org.mule.modules.zuora.zuora.api.ZObjectMapper;
import org.mule.modules.zuora.zuora.api.ZuoraClient;
import org.mule.modules.zuora.zuora.api.ZuoraException;

import java.util.List;
import java.util.Map;

/**
 * @author flbulgarelli
 */
@Module(name = "zuora",
        namespace = "http://repository.mulesoft.org/releases/org/mule/modules/mule-module-zuora",
        schemaLocation = "http://repository.mulesoft.org/releases/org/mule/modules/mule-module-zuora/1.0/mule-zuora.xsd")
public class ZuoraModule {
    @Configurable
    @Optional
    private ZuoraClient<ZuoraException> client;

    @Configurable
    private String endpoint;


    @SessionCreate
    public ZuoraSession createSession(@SessionKey String username, String password) {
        if (client == null) {
            return new ZuoraSession(username, password, endpoint);
        } else {
            return new ZuoraSession(client);
        }
    }

    @SessionDestroy
    public void destroySession(@Session ZuoraSession session) {
        // DO NOTHING AS ZUORA DO NOT HAVE A LOGOUT API CALL (WTF?)
    }

    /**
     * Batch creation of ZObjects associated to Subscriptions
     * <p/>
     * {@code <subscribe subscriptions-ref="#[variable:subscribtions]"/>}
     *
     * @param subscriptions
     * @return a subscription results list, one for each subscription
     */
    @Processor
    public List<SubscribeResult> subscribe(@Session ZuoraSession session, List<com.zuora.api.SubscribeRequest> subscriptions)
            throws ZuoraException {
        return session.getClient().subscribe(subscriptions);
    }

    /**
     * Batch creation of ZObjects
     * <p/>
     * {@code <create>
     * <zobjects>
     * <zobject ref="#[variable:anObject]"/>
     * </zobject>
     * </create>}
     *
     * @param zobjects the zobjects to create
     * @param type     the type of zobject passed
     * @return a list of SaveResult, one for each ZObject
     */
    @Processor
    public List<SaveResult> create(@Session ZuoraSession session, ZObjectType type, List<Map<String, Object>> zobjects)
            throws ZuoraException {
        return session.getClient().create(ZObjectMapper.toZObject(type, zobjects));
    }

    /**
     * Batch creation of invoces for accounts
     * <p/>
     * {@code <generate zobjects-ref="#[variable:accounts]"/>}
     *
     * @param zobjects the zobjects to generate, as a list of string-object maps .
     *                 Zuora attribute names, unlike java beans, are CamelCase.
     * @param type     the type of zobject passed
     * @return a list of SaveResult, one for each ZObject
     */
    @Processor
    public List<SaveResult> generate(@Session ZuoraSession session, ZObjectType type, List<Map<String, Object>> zobjects)
            throws ZuoraException {
        return session.getClient().generate(ZObjectMapper.toZObject(type, zobjects));
    }

    /**
     * Batch update of ZObjects
     * <p/>
     * {@code <update zobjects-ref="#[variable:objects]"/>}
     *
     * @param zobjects the zobjects to update, as a list of string-object maps .
     *                 Zuora attribute names, unlike java beans, are CamelCase.
     * @param type     the type of zobject passed
     * @return a list of SaveResult, one for each ZObject
     */
    @Processor
    public List<SaveResult> update(@Session ZuoraSession session, ZObjectType type, List<Map<String, Object>> zobjects)
            throws ZuoraException {
        return session.getClient().update(ZObjectMapper.toZObject(type, zobjects));
    }

    /**
     * Batch delete of ZObjects
     * <p/>
     * {@code <delete ids-ref="#[variable:ids]" type="#[variable:zobjectType]"/>}
     *
     * @param type the type of ZObjects to delete
     * @param ids
     * @return a list of DeleteResults, one for each id
     */
    @Processor
    public List<DeleteResult> delete(@Session ZuoraSession session, ZObjectType type, List<String> ids)
            throws ZuoraException {
        return session.getClient().delete(type.getTypeName(), ids);
    }

    /**
     * Lazily retrieves ZObject that match a given query,
     * written in Zuora native query language
     * <p/>
     * {@code <find query="#[header:queryString]" />}
     *
     * @param zquery
     * @return a ZObjects iterable. ZObjects returned by this operation
     *         may be instances of either StaticZObject - like Account or Amendment -,  if the object is a non-customizable Zuora entity,
     *         or ZObject,  if the object is a customizable Zuora entity
     */
    @Processor
    public Iterable<ZObject> find(@Session ZuoraSession session, String zquery)
            throws ZuoraException {
        return session.getClient().find(zquery);
    }

    /**
     * Retrieve a product profile
     *
     * @param productId The id of the product to retrieve a product profile for
     * @throws ZuoraException
     */
    @Processor
    public Map<String, Object> productProfile(@Session ZuoraSession session, String productId) throws ZuoraException {
        return session.getClient().productProfile(productId);
    }

    /**
     * Answers user information
     * <p/>
     * {@code <get-user-info userId="#[header:userId]""/>}
     *
     * @return a User
     */
    @Processor
    public User getUserInfo(@Session ZuoraSession session)
            throws ZuoraException {
        return session.getClient().getUserInfo();
    }

    /**
     * Amends subscriptions
     * <p/>
     * {@code <amend amendaments-ref="#[header:amendamentsList]"/>}
     *
     * @param amendaments
     * @return a list of AmmendResults, one for each amendament
     */
    @Processor
    public List<AmendResult> amend(@Session ZuoraSession session, List<com.zuora.api.AmendRequest> amendaments)
            throws ZuoraException {
        return session.getClient().amend(amendaments);
    }

    public void setEndpoint(String enpoint) {
        this.endpoint = enpoint;
    }

    public String getEnpoint() {
        return endpoint;
    }

    public void setClient(ZuoraClient<ZuoraException> client) {
        this.client = client;
    }
}
