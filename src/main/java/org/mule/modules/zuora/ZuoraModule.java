/**
 * Mule Zuora Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.zuora;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.List;
import java.util.Map;

import org.mule.DefaultMuleMessage;
import org.mule.api.ConnectionException;
import org.mule.api.ConnectionExceptionCode;
import org.mule.api.MuleContext;
import org.mule.api.MuleMessage;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.InvalidateConnectionOn;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.display.Password;
import org.mule.api.annotations.display.Placement;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.context.MuleContextAware;
import org.mule.api.transformer.TransformerException;
import org.mule.construct.Flow;
import org.mule.modules.zuora.utils.FlowUtils;
import org.mule.modules.zuora.zobject.ZObjectType;
import org.mule.modules.zuora.zuora.api.CxfZuoraClient;
import org.mule.modules.zuora.zuora.api.SessionTimedOutException;
import org.mule.modules.zuora.zuora.api.ZObjectMapper;
import org.mule.modules.zuora.zuora.api.ZuoraClient;
import org.mule.modules.zuora.zuora.api.ZuoraException;
import org.mule.transformer.codec.Base64Encoder;

import com.zuora.api.AmendResult;
import com.zuora.api.DeleteResult;
import com.zuora.api.ErrorCode;
import com.zuora.api.LoginFault;
import com.zuora.api.SaveResult;
import com.zuora.api.SubscribeResult;
import com.zuora.api.UnexpectedErrorFault;
import com.zuora.api.object.ZObject;

/**
 * Zuora is the leader in online recurring billing and payment solutions for SaaS and subscription businesses.
 * <p/>
 * This connector provides full access to the Z-Commerce platform API.
 *
 * @author MuleSoft, Inc.
 */
@Connector(name = "zuora", friendlyName = "Zuora")
public class ZuoraModule implements MuleContextAware {

    /**
     * The client to use. Mainly for mocking purposes
     */
    @Configurable
    @Optional
    private ZuoraClient<Exception> client;

    /**
     * Target URI to connect to
     */
    @Configurable
    @Default("https://apisandbox.zuora.com/apps/services/a/43.0")
    @Optional
    @Placement(group = "Connection")
    private String endpoint;

    private String username;
    private String password;

    private MuleContext muleContext;

    /**
     * Connects to Zuora
     *
     * @param username Username to identify the user
     * @param password Password to authenticate the username
     */
    @Connect
    public synchronized void connect(@ConnectionKey String username, @Password String password)
            throws ConnectionException {
        try {
            client = new CxfZuoraClient(username, password, this.endpoint);
            this.username = username;
            this.password = password;
        } catch (UnexpectedErrorFault e) {
            throw new ConnectionException(ConnectionExceptionCode.UNKNOWN, e.getFaultInfo().getFaultCode().value(), e.getFaultInfo().getFaultMessage());
        } catch (LoginFault e) {
            if (e.getFaultInfo().getFaultCode() == ErrorCode.INVALID_LOGIN) {
                throw new ConnectionException(ConnectionExceptionCode.INCORRECT_CREDENTIALS, e.getFaultInfo().getFaultCode().value(), e.getFaultInfo().getFaultMessage());
            } else {
                throw new ConnectionException(ConnectionExceptionCode.UNKNOWN, e.getFaultInfo().getFaultCode().value(), e.getFaultInfo().getFaultMessage());
            }
        }
    }

    @ValidateConnection
    public boolean isConnected() {
        return client != null;
    }

    /**
     * Destroys the session
     */
    @Disconnect
    public synchronized void disconnect() {
        client = null;
    }

    @ConnectionIdentifier
    public String getSessionId() {
        return client.getSessionId();
    }

    /**
     * Batch creation of ZObjects associated to Subscriptions
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:subscribe}
     *
     * @param subscriptions the list of subscriptions to perform
     * @return a subscription results list, one for each subscription
     * 
     * @throws Exception If subscription fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public List<SubscribeResult> subscribe(List<com.zuora.api.SubscribeRequest> subscriptions)
            throws Exception {
        return client.subscribe(subscriptions);
    }

    /**
     * Batch creation of ZObjects
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:create}
     *
     * @param zobjects the zobjects to create
     * @param type     the type of zobject passed
     * @return a list of {@link SaveResult}, one for each ZObject
     * 
     * @throws Exception If creation fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public List<SaveResult> create(ZObjectType type, List<Map<String, Object>> zobjects)
            throws Exception {
        return client.create(ZObjectMapper.toZObject(type, zobjects));
    }

    /**
     * Batch creation of invoices for accounts
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:generate}
     *
     * @param zobjects the zobjects to generate, as a list of string-object maps .
     *                 Zuora attribute names, unlike java beans, are CamelCase.
     * @param type     the type of zobject passed
     * @return a list of {@link SaveResult}, one for each ZObject
     * 
     * @throws Exception if generation fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public List<SaveResult> generate(ZObjectType type, List<Map<String, Object>> zobjects)
            throws Exception {
        return client.generate(ZObjectMapper.toZObject(type, zobjects));
    }

    /**
     * Batch update of ZObjects
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:update}
     *
     * @param zobjects the zobjects to update, as a list of string-object maps .
     *                 Zuora attribute names, unlike java beans, are CamelCase.
     * @param type     the type of zobject passed
     * @return a list of {@link SaveResult}, one for each ZObject
     * 
     * @throws Exception If update fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public List<SaveResult> update(ZObjectType type, List<Map<String, Object>> zobjects)
            throws Exception {
        return client.update(ZObjectMapper.toZObject(type, zobjects));
    }

    /**
     * Batch delete of ZObjects
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:delete}
     *
     * @param type the type of ZObjects to delete
     * @param ids  the list of ids to delete
     * @return a list of {@link DeleteResult}, one for each id
     * 
     * @throws Exception if deletion fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public List<DeleteResult> delete(ZObjectType type, List<String> ids)
            throws Exception {
        return client.delete(type.getTypeName(), ids);
    }

    /**
     * Lazily retrieves ZObject that match a given query,
     * written in Zuora native query language
     * <p/>
     * If you expect more than 2000 results to be returned, remember that you have
     * to enable queryMore for your zuora account (as documented:
     * http://knowledgecenter.zuora.com/D_Using_the_Zuora_API/C_API_Reference/E_API_Calls/queryMore())
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:find}
     *
     * @param zquery the query, using the SQL-Like Zuora Query Language
     * @return a {@link ZObject} iterable. {@link ZObject} returned by this operation
     *         may be instances of either static ZObject - like Account or Amendment -,  if the object is a non-customizable Zuora entity,
     *         or {@link ZObject},  if the object is a customizable Zuora entity
     * @throws Exception if find fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public Iterable<ZObject> find(String zquery)
            throws Exception {
        return client.find(zquery);
    }

    /**
     * Retrieve a product profile
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:product-profile}
     *
     * @param productId The id of the product to retrieve a product profile for
     * @return the profile, as a String-Object Map
     * @throws Exception if requesting product profile fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public Map<String, Object> productProfile(String productId) throws Exception {
        return client.productProfile(productId);
    }

    /**
     * Answers user information
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:get-user-info}
     *
     * @return a {@link User}
     * @throws Exception if request fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public User getUserInfo()
            throws Exception {
        return client.getUserInfo();
    }

    /**
     * Amends subscriptions
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:amend}
     *
     * @param amendaments the list of amendments to perform
     * @return a list of {@link AmendResult}, one for each amendment
     * @throws Exception if amend fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public List<AmendResult> amend(List<com.zuora.api.AmendRequest> amendaments)
            throws Exception {
        return client.amend(amendaments);
    }

    /**
     * Retrieve an account profile
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:account-profile}
     *
     * @param accountId The id of the account to retrieve an account profile for
     * @return the account, as a String-Object Map
     * @throws Exception if request fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public Map<String, Object> accountProfile(String accountId)
            throws Exception {
        return client.accountProfile(accountId);
    }

    /**
     * Retrieve a full invoice
     * <p/>
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:get-invoice}
     *
     * @param invoiceId The id of the account to retrieve an account profile for
     * @return the invoice, as a String-Object Map
     * 
     * @throws Exception if request fails
     */
    @Processor
    @InvalidateConnectionOn(exception=SessionTimedOutException.class)
    public Map<String, Object> getInvoice(String invoiceId)
            throws Exception {
        return client.getInvoice(invoiceId);
    }

    private InputStream getExportedFileStream(final String exportId) throws IOException {
        try {
            URL url = new URL("https://apisandbox.zuora.com/apps/api/file/" + exportId);
            
            final String authentitaction = new Base64Encoder().doTransform(this.username + ":" + this.password, "utf-8").toString();
            final URLConnection uc = url.openConnection();
            uc.setRequestProperty("Authorization", "Basic " + authentitaction);
            final InputStream content = uc.getInputStream();
            return content;
        } catch (final TransformerException e) {
            throw new ZuoraException("Could not encode your credentials. Are they set?", e);
        }
    }

//    @Processor
//    public String getExport(final String exportId) throws IOException {
//        BufferedReader reader = null;
//        try {
//            final InputStream stream = getExportedFileStream(exportId);
//            reader = new BufferedReader(new InputStreamReader(stream));
//            final StringBuilder fullContent = new StringBuilder();
//            String inputLine = reader.readLine(); // skip headers
//            while ((inputLine = reader.readLine()) != null) {
//                fullContent.append(inputLine).append("\n");
//            }
//            return fullContent.toString();
//        } finally {
//            if (reader != null) {
//                reader.close();
//            }
//        }
//    }

    /**
     * Retrieve an exported file from Zuora, and invoke a callback for each batch of lines in it
     * 
     * {@sample.xml ../../../doc/mule-module-zuora.xml.sample zuora:batch-process-export-file}
     *
     * @param exportId id of the Zuora exported file to process
     * @param batchSize the number of lines to process per batch
     * @param callbackFlow name of the flow to invoke for each batch
     * 
     * @throws IOException if can't access the exported file
     * @throws IllegalArgumentException if the callback flow doesn't exist
     * @throws ZuoraException if the exported file doesn't exist
     */
    @Processor
    public void batchProcessExportFile(final String exportId, final @Optional @Default(value="100") Integer batchSize, final String callbackFlow) throws IOException {
        final Flow callback = this.getFlow(callbackFlow);
        if (callback == null) {
            throw new IllegalArgumentException("Flow with name " + callbackFlow + " doesn't exist");
        }
        BufferedReader reader = null;
        try {
            final InputStream stream = getExportedFileStream(exportId);
            reader = new BufferedReader(new InputStreamReader(stream));
            StringBuilder fullContent = new StringBuilder();
            String inputLine = reader.readLine(); // skip headers
            int current = 0;
            
            while ((inputLine = reader.readLine()) != null) {
                fullContent.append(inputLine).append("\n");
                
                if (current == batchSize) {
                    //TODO: invoke
                    MuleMessage batchMessage = new DefaultMuleMessage(fullContent.toString(), this.getMuleContext());
                    batchMessage.setPayload(fullContent.toString());
                    FlowUtils.callFlow(callbackFlow, batchMessage);
                    current = 0;
                    fullContent = new StringBuilder();
                } else {
                    current++;
                }
            }
            if (current > 0) { // Process the last batch
                //invoke;
            }
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
    }

    /**
     * 
     * @param context
     * @param flowName
     * @return
     */
    Flow getFlow(final String flowName) {
        return FlowUtils.getFlow(flowName, this.getMuleContext());   
    }
//    @Processor
//    public String getExport(final String exportId) {
//        final String url = "https://apisandbox.zuora.com/apps/api/file/" + exportId;
//        final WebResource.Builder builder = this.getBuilder(this.username, this.password, url);
//        final String file = builder.get(String.class);
//        return file;
//        
//    }
//
//    protected WebResource.Builder getBuilder(final String user, final String password, final String url) {
//        final Client client = Client.create();
//        client.addFilter(new HTTPBasicAuthFilter(user, password));
//        final WebResource wr = client.resource(url);
//        return wr.type(MediaType.APPLICATION_OCTET_STREAM_TYPE);
//    }

    public void setEndpoint(String endpoint) {
        this.endpoint = endpoint;
    }

    public String getEndpoint() {
        return endpoint;
    }

    public void setClient(ZuoraClient<Exception> client) {
        this.client = client;
    }
    
    public ZuoraClient<Exception> getClient()
    {
        return client;
    }

    @Override
    public void setMuleContext(final MuleContext context) {
        this.muleContext = context;
    }

    private MuleContext getMuleContext() {
        return this.muleContext;
    }
    
}
