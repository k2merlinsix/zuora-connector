/**
 * Mule Zuora Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */

package org.mule.modules.zuora;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.UUID;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.junit.Before;
import org.junit.Test;

import com.zuora.api.DeleteResult;
import com.zuora.api.ProductRatePlanChargeTierData;
import com.zuora.api.RatePlanData;
import com.zuora.api.SaveResult;
import com.zuora.api.SubscribeRequest;
import com.zuora.api.SubscribeResult;
import com.zuora.api.SubscriptionData;
import com.zuora.api.object.Account;
import com.zuora.api.object.Contact;
import com.zuora.api.object.Invoice;
import com.zuora.api.object.PaymentMethod;
import com.zuora.api.object.Product;
import com.zuora.api.object.ProductRatePlan;
import com.zuora.api.object.ProductRatePlanCharge;
import com.zuora.api.object.ProductRatePlanChargeTier;
import com.zuora.api.object.RatePlan;
import com.zuora.api.object.Subscription;
import com.zuora.api.object.ZObject;

public class ZuoraModuleTestDriver {
	private static DatatypeFactory calendarFactory;
	static {
		try {
			calendarFactory = DatatypeFactory.newInstance();
		} catch (DatatypeConfigurationException e) {
			throw new RuntimeException(e);
		}
	}
	
    private ZuoraModule module;
    private final String username = "mule@muletax.com";
    private final String password = "Mule2012";

    @Before
    public void setup() throws Exception {
        module = new ZuoraModule();
        module.setEndpoint("https://apisandbox.zuora.com");
        module.connect(username, password);
    }

    /**
     * Test for creating dynamic zobjects
     */
    @Test
    public void createAndDelete() throws Exception {
        SaveResult result = module.create("Account", Collections.singletonList((ZObject)testAccount())).get(0);
        assertTrue(result.isSuccess());


        DeleteResult deleteResult = module.delete("Account", Arrays.asList(result.getId())).get(0);
        assertTrue(deleteResult.isSuccess());
    }

    /**
     * Test for creating zobjects with relationships
     */
    @Test
    @SuppressWarnings("serial")
    public void createAndDeleteRelated() throws Exception {
        SaveResult saveResult = module.create("Account", Collections.singletonList((ZObject)testAccount())).get(0);
        assertTrue(saveResult.isSuccess());

        final String accountId = saveResult.getId();
        try {
        	Contact contact = testContact(accountId);
        	
            SaveResult result = module.create("Contact",
                    Collections.singletonList((ZObject)contact)).get(0);
            assertTrue(result.isSuccess());

            DeleteResult deleteResult = module.delete("Contact", Arrays.asList(result.getId())).get(0);
            assertTrue(deleteResult.isSuccess());
        } finally {
            module.delete("Account", Arrays.asList(accountId)).get(0);
        }
    }

	private Contact testContact(final String accountId) {
		Contact contact = new Contact();
		contact.setFirstName("John");
		contact.setLastName("Doe");
		contact.setCountry("US");
		contact.setAccountId(accountId);
		return contact;
	}

    /**
     * Test for fetching zobjects when there is no object that matches the query
     */
    @Test
    public void findNoResult() throws Exception {
        Iterator<ZObject> result = module.find("SELECT Id FROM Account where id ='not here!'").iterator();
        assertFalse(result.hasNext());
    }

    /**
     * Test for fetching zobjects when there is an object that matches the query
     */
    @Test
    public void findOneResult() throws Exception {
        String id = module.create("Account", Collections.singletonList((ZObject)testAccount())).get(0).getId();
        try {
            Iterator<ZObject> result = module.find("SELECT Id, Name, AccountNumber FROM Account WHERE AccountNumber = '7891'").iterator();
            assertTrue(result.hasNext());
            Account next = (Account)result.next();
            assertNotNull(next.getId());
            assertEquals(testAccount().getName(), next.getName());
            assertFalse(result.hasNext());
        } finally {
            module.delete("Account", Arrays.asList(id));
        }
    }


    

    @Test
    public void getUserInfo() throws Exception {
        User userInfo = module.getUserInfo();
        assertNotNull(userInfo);
        assertFalse(userInfo.getUserId().isEmpty());
        assertFalse(userInfo.getUserEmail().isEmpty());
        assertEquals(username, userInfo.getUsername());
        assertFalse(userInfo.getTenantId().isEmpty());
        assertFalse(userInfo.getTenantName().isEmpty());
    }

    @Test
    @SuppressWarnings("serial")
    public void createRetrieveAnAccountProfileAndDeleteRelatedAccount() throws Exception {
        SaveResult accountResult = module.create("Account", Collections.singletonList((ZObject)testAccount())).get(0);
        assertTrue(accountResult.isSuccess());

        final String accountId = accountResult.getId();
        try {
        	Contact contact = testContact(accountId);
            SaveResult contactResult = module.create("Contact",
                    Collections.singletonList((ZObject) contact)).get(0);

            assertTrue(contactResult.isSuccess());

            Account accountMap = testAccount();
            accountMap.setId(accountId);
            accountMap.setBillToId(contactResult.getId());

            SaveResult accountUpdateResult = module.update("Account", Collections.<ZObject>singletonList(accountMap)).get(0);

            assertTrue(accountUpdateResult.isSuccess());
        } finally {
            module.delete("Account", Arrays.asList(accountId)).get(0);
        }
    }

    @SuppressWarnings("serial")
    private Account testAccount() {
    	Account account = new Account();
    	account.setName("foo");
    	account.setCurrency("USD");
    	account.setBillCycleDay(1);
    	account.setAccountNumber("7891");
    	account.setAllowInvoiceEdit(false);
    	account.setAutoPay(false);
    	account.setNotes("foobar");
    	account.setStatus("Draft");
    	
        return account;
    }

    /**
     * Test for fetching zobjects when there is an object that matches the query
     */
    @Test
    public void getInvoice() throws Exception {

        //Setup Product details
        String productId = getTestProduct();
        String productRatePlanId = getTestProductRatePlan(productId);
        String productRateplanChargeId = getTestProductRatePlanCharge(productRatePlanId);

        assertNotNull(productId);
        assertNotNull(productRatePlanId);
        assertNotNull(productRateplanChargeId);
        SubscribeRequest subscribeReq = new SubscribeRequest();

        //subscribeReq.setAccount(testAccount());
        String uniqueString = UUID.randomUUID().toString();

        Contact contact = new Contact();
        contact.setFirstName(uniqueString);
        contact.setLastName(uniqueString);
        contact.setCountry("USA");
        contact.setState("MI");
        

        Account account = new Account();
        account.setName(uniqueString);
        account.setBillCycleDay(1);
        account.setCurrency("USD");
        account.setAllowInvoiceEdit(false);
        account.setAutoPay(false);
        account.setStatus("Draft");
        account.setPaymentTerm("Due Upon Receipt");
        account.setBatch("Batch1");

        PaymentMethod paymentMethod = new PaymentMethod();
        paymentMethod.setType("CreditCard");
        paymentMethod.setCreditCardNumber("5105105105105100");
        paymentMethod.setCreditCardType("Visa");
        paymentMethod.setCreditCardExpirationYear(2026);
        paymentMethod.setCreditCardExpirationMonth(5);
        paymentMethod.setCreditCardHolderName("Unit Test");

        GregorianCalendar calStart = new GregorianCalendar();
        calStart.add(Calendar.DATE, -1);
        XMLGregorianCalendar effectiveStartDate = DatatypeFactory.newInstance().newXMLGregorianCalendar(calStart);

        Subscription subscription = new Subscription();
        subscription.setContractAcceptanceDate(effectiveStartDate);
        subscription.setContractEffectiveDate(effectiveStartDate);
        subscription.setInitialTerm(12);
        subscription.setRenewalTerm(12);

        RatePlan ratePlan = new RatePlan();
        ratePlan.setProductRatePlanId(productRatePlanId);
        RatePlanData ratePlanData = new RatePlanData();
        ratePlanData.setRatePlan(ratePlan);

        SubscriptionData subscriptionData = new SubscriptionData();
        subscriptionData.setSubscription(subscription);
        subscriptionData.getRatePlanData().add(ratePlanData);

        subscribeReq.setAccount(account);
        subscribeReq.setBillToContact(contact);
        subscribeReq.setSoldToContact(contact);
        subscribeReq.setPaymentMethod(paymentMethod);
        subscribeReq.setSubscriptionData(subscriptionData);
        SubscribeResult subscribeResult = module.subscribe(Collections.singletonList(subscribeReq)).get(0);
        assertTrue(subscribeResult.isSuccess());

        assertEquals(0,subscribeResult.getErrors().size());

        Iterable<ZObject> results = module.find("select Id,Status,Amount from Invoice where Id = '" + subscribeResult.getInvoiceId() + "'");
        
        Invoice invoice = (Invoice) results.iterator().next();
        
        assertEquals("Posted",invoice.getStatus());
        assertEquals("1.18",invoice.getAmount().toString());
//        
//        Iterable<ZObject> itemResult = module.find("select Id,Posted,Amount from InvoiceItem where InvoiceId = '" + subscribeResult.getInvoiceId() + "'");
//        
//        InvoiceItem item = (InvoiceItem) itemResult.iterator().next();
//        assertNotNull(invoice.get);
//        assertNotNull(result.get("soldTo"));

        DeleteResult deleteResultAccount = module.delete("Account", Collections.singletonList(subscribeResult.getAccountId())).get(0);
        assertTrue(deleteResultAccount.isSuccess());

        DeleteResult deleteResultProduct = module.delete("Product", Collections.singletonList(productId)).get(0);
        assertTrue(deleteResultProduct.isSuccess());
    }

    @SuppressWarnings("serial")
    private String getTestProduct() throws Exception {

        Map<String, Object> returnMap = new HashMap<String, Object>();
        SaveResult saveResult = null;

    	Product product = new Product();
    	product.setName("UnitTestProduct");
    	
    	product.setEffectiveStartDate(calendarFactory.newXMLGregorianCalendar("2011-01-01T20:00:00"));
    	product.setEffectiveEndDate(calendarFactory.newXMLGregorianCalendar("2015-01-01T20:00:00"));
    	
        saveResult = module.create("Product", Collections.<ZObject>singletonList(product)).get(0);

        return saveResult.getId();

    }

    @SuppressWarnings("serial")
    private String getTestProductRatePlan(final String productId) throws Exception {
        SaveResult saveResult = null;

    	ProductRatePlan productRatePlan = new ProductRatePlan();
    	productRatePlan.setProductId(productId);
    	productRatePlan.setName("TestProductRatePlan");
    	
    	productRatePlan.setEffectiveStartDate(calendarFactory.newXMLGregorianCalendar("2011-01-01T20:00:00"));
    	productRatePlan.setEffectiveEndDate(calendarFactory.newXMLGregorianCalendar("2015-01-01T20:00:00"));
    	
    	productRatePlan.setDescription("Test product used in unit test.");

    	saveResult = module.create("ProductRatePlan", Collections.<ZObject>singletonList(productRatePlan)).get(0);
        return saveResult.getId();

    }

    @SuppressWarnings("serial")
    private String getTestProductRatePlanCharge(final String productRatePlanId) throws Exception {
        ProductRatePlanChargeTier tier = new ProductRatePlanChargeTier();
        tier.setCurrency("USD");
        tier.setPrice(new BigDecimal(12.2));
        tier.setTier(1);
        tier.setActive(true);
        final ProductRatePlanChargeTierData productRatePlanChargeTierData = new ProductRatePlanChargeTierData();
        productRatePlanChargeTierData.getProductRatePlanChargeTier().add(tier);

        SaveResult saveResult = null;

        ProductRatePlanCharge charge = new ProductRatePlanCharge();
        charge.setBillingPeriod("Month");
        charge.setChargeModel("FlatFee");
        charge.setChargeType("Recurring");
        charge.setDefaultQuantity(new BigDecimal(1));
        charge.setName("TestProductRatePlanCharge");
        charge.setProductRatePlanId(productRatePlanId);
        charge.setProductRatePlanChargeTierData(productRatePlanChargeTierData);
        charge.setTriggerEvent("ContractEffective");
        charge.setChargeType("Recurring");
        charge.setChargeModel("PerUnit");
        charge.setUOM("Each");;
        
        saveResult = module.create("ProductRatePlanCharge", Collections.<ZObject>singletonList(charge)).get(0);

        return saveResult.getId();

    }
}
