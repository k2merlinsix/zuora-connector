/**
 * Mule Zuora Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */

package org.mule.modules.zuora;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import org.mule.modules.zuora.zobject.ZObject;

import com.zuora.api.object.Account;
import com.zuora.api.object.DeleteResult;
import com.zuora.api.object.SaveResult;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;

public class ZuoraModuleTestDriver
{
    private ZuoraModule module;

    @Before
    public void setup() throws Exception
    {
        module = new ZuoraModule();
        module.setPassword(System.getenv("zuoraPassword"));
        module.setUsername(System.getenv("zuoraUsername"));
        module.setEndpoint("https://apisandbox.zuora.com/apps/services/a/29.0");
        module.init();
    }

    @Test
    public void createAndDelete() throws Exception
    {
        SaveResult result = module.create("Account", Collections.singletonList(testAccount())).get(0);
        assertTrue(result.getSuccess());

        DeleteResult deleteResult = module.delete("Account", Arrays.asList(result.getId())).get(0);
        assertTrue(deleteResult.getSuccess());
    }

    @Test
    public void findNoResult() throws Exception
    {
        Iterator<ZObject> result = module.find("SELECT Id FROM Account").iterator();
        assertFalse(result.hasNext());
    }

    @Test
    public void findOneResult() throws Exception
    {
        String id = module.create("Account", Collections.singletonList(testAccount())).get(0).getId();
        try
        {
            Iterator<ZObject> result = module.find("SELECT Id FROM Account").iterator();
            assertTrue(result.hasNext());
            assertNotNull(((Account) result.next()).getField("Id"));
            assertFalse(result.hasNext());
        }
        finally
        {
            module.delete("Account", Arrays.asList(id));
        }
    }

    @Test
    public void getUserInfo() throws Exception
    {
        assertNotNull(module.getUserInfo());
    }

    @SuppressWarnings("serial")
    private Map<String, Object> testAccount()
    {
        return new HashMap<String, Object>()
        {
            {
                put("name", "foo");
                put("currency", "USD");
                put("billCycleDay", 1);
                put("accountNumber", "501");
                put("allowInvoiceEdit", false);
                put("autoPay", false);
                put("notes", "foobar");
                put("status", "Draft");
            }
        };
    }

}
